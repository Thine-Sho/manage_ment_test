[{"/Users/Thine/Desktop/test/my-app/src/index.js":"1","/Users/Thine/Desktop/test/my-app/src/App.js":"2","/Users/Thine/Desktop/test/my-app/src/reportWebVitals.js":"3","/Users/Thine/Desktop/test/my-app/src/spreadsheet.js":"4"},{"size":555,"mtime":1608850577318,"results":"5","hashOfConfig":"6"},{"size":263,"mtime":1608851755548,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1608687167470,"results":"8","hashOfConfig":"6"},{"size":4050,"mtime":1608866394563,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"mv1fbz",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/Thine/Desktop/test/my-app/src/index.js",[],["21","22"],"/Users/Thine/Desktop/test/my-app/src/App.js",["23"],"import React from 'react';\nimport './App.css';\n\nimport SpreadSheetHandler from './spreadsheet.js';\n\nclass App extends React.Component {\n  constructor(props)\n   {\n    super(props);\n  }\n\n  render()\n  {\n    return(<SpreadSheetHandler />);\n  }\n}\n\nexport default App;\n","/Users/Thine/Desktop/test/my-app/src/reportWebVitals.js",[],"/Users/Thine/Desktop/test/my-app/src/spreadsheet.js",["24","25","26"],"import React from 'react';\n\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\n\nconst gconfig = require('./ecstatic-baton-299501-bc221c32f9bb.json');\nconst CLIENT_EMAIL = process.env.REACT_APP_GOOGLE_CLIENT_EMAIL;\nconst PRIVATE_KEY = process.env.REACT_APP_GOOGLE_SERVICE_PRIVATE_KEY;\nconst SPREADSHEET_ID = '1Y3Dk0trdXfzA3IeIeKcwkZaVFCKK5CbFCiYMPWqVtMo';\nconst SHEET_ID = '522171830';\n\nexport class SpreadSheetHandler extends React.Component {\n  constructor(props)\n   {\n    super(props);\n    this.state = {\n      doc: null,\n      sheet_content_name: [],\n      name: '',\n      age: ''\n    };\n\n    this.uploadToSheet = this.uploadToSheet.bind(this);\n    this.pullFromSheet = this.pullFromSheet.bind(this);\n    this.extractSheetContent = this.extractSheetContent.bind(this);\n    this.finalUpload = this.finalUpload.bind(this);\n    this.deleteRows = this.deleteRows.bind(this);\n  }\n\n  async uploadToSheet(item){\n    const doc = new GoogleSpreadsheet(SPREADSHEET_ID);\n    this.setState({doc: doc}, function () {\n      const newRow = {name: this.state.name, age:this.state.age};\n      this.appendSpreadsheet(newRow);\n    })\n  }\n\n  async appendSpreadsheet(row){\n    try {\n\n      await this.state.doc.useServiceAccountAuth(gconfig, gconfig.client_email);\n      // loads document properties and worksheets\n      await this.state.doc.loadInfo();\n\n      const sheet = this.state.doc.sheetsById[SHEET_ID];\n      console.log('UPLOADED TO: ' + sheet.title);\n\n      const result = await sheet.addRow(row);\n\n    } catch (e) {\n      console.error('Error: ', e);\n    }\n  };\n\n  async pullFromSheet()\n  {\n    const doc = new GoogleSpreadsheet(SPREADSHEET_ID);\n    this.setState({doc: doc}, function () {\n      this.displaySpreadsheet();\n    })\n  }\n\n  async deleteRows()\n  {\n    const doc = new GoogleSpreadsheet(SPREADSHEET_ID);\n    this.setState({doc: doc}, function () {\n      this.rowsToDelete();\n    })\n  }\n\n  async rowsToDelete()\n  {\n    try{\n      await this.state.doc.useServiceAccountAuth(gconfig, gconfig.client_email);\n      await this.state.doc.loadInfo();\n\n      const sheet = this.state.doc.sheetsById[SHEET_ID];\n      console.log('DELETED FROM: ' + sheet.title);\n\n      const rows = await sheet.getRows();\n\n\t\twhile (rows.length > 0) {\n\t\t\tawait rows.pop().delete();\n\t\t}\n\n      console.log(\"Finished\");\n\n    } catch (e) {\n      console.error('Error: ', e);\n    }\n  }\n\n  async displaySpreadsheet()\n  {\n    try{\n      await this.state.doc.useServiceAccountAuth(gconfig, gconfig.client_email);\n      await this.state.doc.loadInfo();\n\n      const sheet = this.state.doc.sheetsById[SHEET_ID];\n      console.log('PULLED FROM: ' + sheet.title);\n\n      const row_result = await sheet.getRows();\n\n      this.extractSheetContent(row_result);\n\n    } catch (e) {\n      console.error('Error: ', e);\n    }\n  }\n\n  extractSheetContent(data)\n  {\n\n    let content = [];\n\n    for(let i=0; i<data.length; i++){\n      content.push(this.contentFormat(data[i], i));\n    }//why doesn't it work when I use map but works when I use for loop\n\n    this.setState(state => ({\n      sheet_content_name: content\n    }));\n  }\n\n  updateInputState = (event) => {\n    \n    let name = event.target.name;\n    let val = event.target.value;\n    \n    this.setState({[name]: val});\n  }\n\n  finalUpload()\n  {\n  \tif(this.state.name && this.state.age)\n  \t{\n  \t\tthis.uploadToSheet();\n  \t}\n  }\n\n  contentFormat(data, index)\n  {\n    return(\n      <div key={index.toString()}>\n        <span>{data.name}</span>\n        <span>{data.age}</span>\n      </div>\n    );//\n  }\n\n\n  render()\n  {\n    return(\n       <section>\n        <div>\n        \t<input type=\"text\" name=\"name\" onChange={this.updateInputState} />\n        \t<input type=\"text\" name=\"age\" onChange={this.updateInputState} />\n\t\t\t<button onClick={()=>{this.finalUpload();}}>Upload</button>\n\t\t\t<button onClick={()=>{this.deleteRows();}}>Delete</button>\n\t\t\t<button onClick={()=>{this.pullFromSheet();}}>Display</button>\n            <ul>{this.state.sheet_content_name}</ul>\n        </div>\n       </section>\n    );\n  }\n}\n\nexport default SpreadSheetHandler",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":7,"column":3,"nodeType":"33","messageId":"34","endLine":10,"endColumn":4},{"ruleId":"35","severity":1,"message":"36","line":6,"column":7,"nodeType":"37","messageId":"38","endLine":6,"endColumn":19},{"ruleId":"35","severity":1,"message":"39","line":7,"column":7,"nodeType":"37","messageId":"38","endLine":7,"endColumn":18},{"ruleId":"35","severity":1,"message":"40","line":47,"column":13,"nodeType":"37","messageId":"38","endLine":47,"endColumn":19},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'CLIENT_EMAIL' is assigned a value but never used.","Identifier","unusedVar","'PRIVATE_KEY' is assigned a value but never used.","'result' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]